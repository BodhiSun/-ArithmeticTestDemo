package com.bodhi.seniorcourse;

/**
 * @author : Sun
 * @version : 1.0
 * create time : 2019/8/23 18:00
 * desc :二叉树-搜索二叉树(BinarySearchTree) 以及搜索二叉树的查找、插入、删除
 *
 * 搜索二叉树概念：对于树中的任何一个节点为头的子树 左子树都比它小 右子树都比它大，单独一个节点也符合
 * 后继节点:在二叉树的中序遍历的序列中， node的下一个节点叫作node的后继节点
 * 前驱节点:在二叉树的中序遍历的序列中， node的上一个节点叫作node的前驱节点
 *
 * 搜索二叉树查找：
 * 将树的头结点head和给定元素element大小比较,element大于head则当前指针cur=head.right，element继续和新的节
 * 点比较如果比新的cur节点小 则当前指针cur=cur.left，直至找到元素element=cur返回 或者cur.left或cur.right
 * 为空不能继续比较下去 没找到元素返回null
 * 搜索二叉树插入：
 * 和查找一样逻辑先找到即将插入的父节点位置 ，当element大于某节点并且当前节点的右节点为null 或element小与某
 * 节点并且当前节点左节点为null 当前节点即为要待出入元素的父节点 然后根据大小插入到父节点的左边或者右边
 * 搜索二叉树删除：
 * 首先查找给定要删除的元素element是否在树内，包含则返回节点不包含返回空，然后分三种情况：1，当要删除的节点
 * 为叶子节点 左右孩子都没有时 直接删除 2，当要删除的节点只有左孩子或只有右孩子时 删除此节点 并用左孩子或
 * 右孩子移动到它位置 3，当要删除的节点左右孩子都有时 用当前节点右子树上最左节点(后继节点)或当前节点左子树
 * 上的最右节点(前驱节点)顶替他的位置 如果前驱/后继节点仍有孩子 则前驱/后继的孩子顶替到前驱/后继原来的位置
 *
 */
public class BinarySearchTree_Structure {
}
