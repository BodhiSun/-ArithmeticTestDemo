package com.bodhi.seniorcourse;

/**
 * @author : Sun
 * @version : 1.0
 * create time : 2019/8/27 16:27
 * desc :平衡搜索二叉树-AVL树、红黑树、SB树
 *
 * 几种常见的平衡搜索二叉树：CRUD时间复杂度：O(logN)
 *  1)AVL树：平衡性高度严苛的树 即对于树中的任何一个节点 它的左子树和右子树的高度差不超过1
 *  2)红黑树：平衡性舍掉一些 因为每条链上的黑色节点数目必须相同 所以最坏情况两条链之间高度差不会超过两倍
 *  3)SB树(Size Balanced Tree),平衡性来自，任何一个叔叔节点的节点个数，不能少于任何一个侄子节点的节点个数
 *  不同BBS树之间的本质区别：
 *  平衡性越高插入节点时调整树的可能性越大 平衡性低些插入节点时调整的可能性就小些 但是又要满足CRUD为O(logN)
 *  即要保证效率又要尽可能减小调整树的可能性 所以各种树的结构以及约束条件 都是在平衡性上的取舍 严苛度不同而已
 *
 * 无论AVL树、红黑树或者SB树等其他平衡搜索二叉树 插入删除节点时调整的基本动作都是左旋(逆时针旋转)或者右旋(
 * 顺时针旋转)，只是他们的由基本动作所组合的方式不同
 * AVL树四种调整组合：LL型-右旋,RR型--左旋,LR型--先左旋在右旋,RL型--先右旋在左旋
 * AVL树如何发现不平衡：在每个节点上存一个当前树的高度，然后以每个子树为头节点 计算它左右子树的高度差
 *
 *
 */
public class BalanceBinarySearchTree_Structure {
}
